name: Dernek ERP CI/CD Pipeline (Node.js & ECS Fargate) 🌐

on:
  push:
    # Sadece 'main' dalı deploy etsin
    branches: [ main ]
  schedule:
    # Haftalık security scan'i koruyoruz
    - cron: '0 0 * * 0'

permissions:
  contents: read 
  id-token: write # AWS OIDC/Yetkilendirme için Gerekli

jobs:
  # ===================================================
  # AŞAMA 1 & 2: KOD KALİTESİ KONTROLÜ VE SECURITY SCAN (Mevcut adımlar korundu)
  # ===================================================
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Kodu Klonla
        uses: actions/checkout@v4.1.7

      - name: Node.js Ortamını Kur
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Bağımlılıkları Kur
        run: npm ci
      # ... (Lint, Format ve Test adımları) ...
      
  security-scan:
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'schedule' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4.1.7
      # ... (npm audit ve diğer tarama adımları) ...


  # ===================================================
  # AŞAMA 3: DOCKER BUILD VE ECR'A PUSH
  # ===================================================
  build-and-push-docker:
    needs: [code-quality, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4.1.7

      # 1. AWS YETKİLENDİRME
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      # 2. ECR Login (En güvenilir yöntem)
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      # 3. Buildx Sürücüsünü Kur
      - name: Set up Docker Buildx (Container Driver)
        uses: docker/setup-buildx-action@v3.11.0
        with:
          driver: docker-container
          install: true

      # 4. İmaj Metaverisi Oluştur
      - name: Set up Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          # ECR URI ve Depo Adı
          images: ${{ secrets.ECR_REGISTRY }}/dernek-erp-backend 
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            
      # 5. Docker Build ve Push
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6.7.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===================================================
  # AŞAMA 4: AWS ECS FARGATE DEPLOY
  # ===================================================
  aws-deploy:
    needs: [build-and-push-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4.1.7

      # 1. AWS YETKİLENDİRME
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      # 2. TASK DEFINITION'I AL
      - name: Download existing task definition
        id: download_task_def
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ secrets.ECS_TASK_FAMILY }} \
            --query taskDefinition > task-definition.json

      # 3. TASK DEFINITION'I GÜNCELLE
      - name: Render task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: dernek-erp-backend-container 
          image: ${{ secrets.ECR_REGISTRY }}/dernek-erp-backend:${{ github.sha }} 
          
      # 4. YENİ TASK DEFINITION'I KAYDET (JSON syntax düzeltmesi yapıldı)
      - name: Register new Task Definition
        id: register_task
        run: |
          # Render aksiyonunun çıktısını alıp Task Definition olarak kaydet
          echo '{"containerDefinitions":'$(jq '.containerDefinitions | to_entries | map(.value)' ${{ steps.render-task-def.outputs.task-definition }}')'}' > new-task-def.json
          
          # HATA GİDERME: AWS CLI'ın kabul etmediği gereksiz alanları temizle
          cat new-task-def.json | jq 'del(.status, .requiresAttributes, .compatibilities, .revision, .registeredAt, .deregisteredAt, .registeredBy)' > cleaned-task-def.json

          # Yeni Task Definition'ı kaydet
          TASK_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://cleaned-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task-definition-arn=$TASK_ARN" >> $GITHUB_OUTPUT # Çıktıyı sonraki adıma aktar

      # 5. ECS SERVİSİNİ GÜNCELLE VE DEPLOY ET
      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # Önceki adımdan gelen ARN'yi kullan
          task-definition: ${{ steps.register_task.outputs.task-definition-arn }}
          service: ${{ secrets.ECS_SERVICE_NAME }}
          cluster: DernekERP-Cluster
          wait-for-service-stability: true
