name: Dernek ERP CI/CD Pipeline (Node.js) 🌐

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'   # Haftalık security scan

permissions:
  contents: write   # Auto-commit için write izni
  packages: write
  id-token: write

jobs:
  # AŞAMA 1: KOD KALİTESİ KONTROLÜ
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Kodu Klonla
        uses: actions/checkout@v4.1.7

      - name: Node.js Ortamını Kur
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # İhtiyacınıza göre sürümü ayarlayın
          cache: 'npm'

      - name: Bağımlılıkları Kur
        run: npm ci # 'npm install' yerine temiz kurulum için 'npm ci' önerilir

      - name: Lint ve Format Kontrolü (ESLint)
        # Projenizde 'lint' veya benzer bir betik (script) tanımlı olmalıdır
        run: npm run lint # Örn: "lint": "eslint ."
        continue-on-error: true # Hata durumunda bile diğer adımların çalışmasına izin verir

      - name: Formatlama (Prettier/Vs. Otomatik Düzeltme)
        id: format-check # ⭐ YENİ: Bu adımı tanımlıyoruz
        run: |
          # Projenizde 'format' betiği varsa burayı etkinleştirin:
          # npm run format
          echo "Formatlama adımı atlandı. Projenizde 'npm run format' betiği varsa buraya ekleyin."


      - name: Testleri Çalıştır (Opsiyonel)
        # Eğer projenizde unit/entegrasyon testleri varsa buraya ekleyin
        run: npm test || echo "Testler bulunamadı veya çalıştırılamadı."
        continue-on-error: true


      - name: Format Değişikliklerini Commit Et
        # Formatlama adımı çalıştıysa ve değişiklik yaptıysa geri commit eder
        if: always() && steps.format-check.outcome == 'success' # ✅ DÜZELTİLMİŞ SATIR
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add .
          git commit -m "Auto-format with Prettier/Linter" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  # AŞAMA 2: SECURITY SCAN
  security-scan:
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'schedule' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Node.js Ortamını Kur
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Bağımlılıkları Kur
        run: npm ci

      - name: Dependency Scan (npm audit)
        run: npm audit --audit-level=critical # Kritik seviyedeki açıkları kontrol et
        continue-on-error: true # CI/CD hattını kesmemek için

  # AŞAMA 3: DOCKER BUILD VE PUSH
  build-and-push-docker:
    needs: [code-quality, security-scan]
    runs-on: ubuntu-latest
    # Sadece 'main' dalına yapılan 'push' olaylarında çalışır. 'develop' için de ekleyebilirsiniz.
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Docker Login (GHCR)
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Buildx Kur
        uses: docker/setup-buildx-action@v3.11.0
        with:
          driver: docker-container
          install: true

      - name: Metadata Oluştur
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha

      - name: Docker Build ve Push 📦
        uses: docker/build-push-action@v6.7.0
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max