name: Dernek ERP CI/CD Pipeline (Node.js & ECS Fargate) 🌐

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'

permissions:
  contents: read
  id-token: write

jobs:
  # ===================================================
  # 1️⃣ KOD KALİTESİ
  # ===================================================
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Kodu Klonla
        uses: actions/checkout@v4.1.7

      - name: Node.js Ortamını Kur
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Bağımlılıkları Kur
        run: npm ci

  # ===================================================
  # 2️⃣ SECURITY SCAN
  # ===================================================
  security-scan:
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'schedule' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4.1.7
      # npm audit veya trivy eklenebilir

  # ===================================================
  # 3️⃣ DOCKER BUILD & PUSH
  # ===================================================
  build-and-push-docker:
    needs: [code-quality, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.0
        with:
          driver: docker-container
          install: true

      - name: Set up Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ secrets.ECR_REGISTRY }}/dernek-erp
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6.7.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

# ===================================================
# 4️⃣ ECS DEPLOY
# ===================================================
  aws-deploy:
    needs: [build-and-push-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Download existing task definition
        id: download_task_def
        run: |
          # NOT: describe-task-definition çıktısı direkt dosya sistemine yazılacak
          aws ecs describe-task-definition \
            --task-definition ${{ secrets.ECS_TASK_FAMILY }} \
            --query taskDefinition > task-definition.json

      - name: Render task definition (Update image)
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: dernek-erp-backend-container
          image: ${{ secrets.ECR_REGISTRY }}/dernek-erp:${{ github.sha }}

      - name: Register new Task Definition
        id: register_task
        run: |
          # 1. Yeni Task Definition'ı kaydet ve ARN'yi al
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://${{ steps.render-task-def.outputs.task-definition }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          # 2. ARN'yi bir dosyaya yaz (aksiyonun dosya yolu beklemesini garanti etmek için)
          echo "$TASK_DEF_ARN" > new-task-definition-arn.txt
        shell: bash
      - name: Deploy to ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # ARN'yi doğrudan adım çıktısından al
          task-definition: ${{ steps.register_task.outputs.task_def_arn }} 
          service: ${{ secrets.ECS_SERVICE_NAME }}
          cluster: DernekERP-Cluster
          wait-for-service-stability: true