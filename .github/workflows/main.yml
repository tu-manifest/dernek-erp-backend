name: Dernek ERP CI/CD Pipeline (Node.js) 🌐

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'   # Haftalık security scan

permissions:
  contents: write   # Auto-commit için write izni
  packages: write
  id-token: write

jobs:
  # ===================================================
  # AŞAMA 1: KOD KALİTESİ KONTROLÜ
  # ===================================================
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Kodu Klonla
        uses: actions/checkout@v4.1.7

      - name: Node.js Ortamını Kur
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Bağımlılıkları Kur
        run: npm ci

      - name: Lint ve Format Kontrolü (ESLint)
        run: npm run lint
        continue-on-error: true

      - name: Formatlama (Prettier/Vs. Otomatik Düzeltme)
        id: format-check
        run: |
          echo "Formatlama adımı atlandı. Projenizde 'npm run format' betiği varsa buraya ekleyin."

      - name: Testleri Çalıştır (Opsiyonel)
        run: npm test || echo "Testler bulunamadı veya çalıştırılamadı."
        continue-on-error: true

      - name: Format Değişikliklerini Commit Et
        if: always() && steps.format-check.outcome == 'success'
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add .
          git commit -m "Auto-format with Prettier/Linter" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ===================================================
  # AŞAMA 2: SECURITY SCAN
  # ===================================================
  security-scan:
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'schedule' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Node.js Ortamını Kur
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Bağımlılıkları Kur
        run: npm ci

      - name: Dependency Scan (npm audit)
        run: npm audit --audit-level=critical
        continue-on-error: true

  # ===================================================
  # AŞAMA 3: DOCKER BUILD VE PUSH
  # ===================================================
  build-and-push-docker:
    needs: [code-quality, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Docker Login (GHCR)
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Buildx Kur
        uses: docker/setup-buildx-action@v3.11.0
        with:
          driver: docker-container
          install: true

      - name: Metadata Oluştur
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha

      - name: Docker Build ve Push 📦
        uses: docker/build-push-action@v6.7.0
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

 # ===================================================
  # AŞAMA 4: AWS DEPLOY (Elastic Beanstalk)
  # ===================================================
  aws-deploy:
    needs: [code-quality, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Kodu Klonla
        uses: actions/checkout@v4.1.7

      - name: Node.js Ortamını Kur
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      # Bağımlılıklar burada kurulur, migration işlemi artık EB sunucusunda yapılacaktır.
      - name: Bağımlılıkları Kur
        run: npm ci

      # MIGRATION ADIMI KALDIRILDI! Bu işlem artık .ebextensions/01_migrate.config içinde yapılacak.

      # ===================================================
      # ADIM 1: DEPLOY PAKETİNİ HAZIRLA (ZIP)
      # .ebextensions klasörünü de ZIP'e dahil etmeyi unutmayın!
      # ===================================================
      - name: Create deployment package (ZIP)
        run: zip -r deploy_package.zip . -x "node_modules/*" ".git/*" ".github/*"

      # ===================================================
      # ADIM 2: AWS'E BAĞLAN VE CLI YETKİLENDİRMESİ
      # ===================================================
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1 # Frankfurt

      # ===================================================
      # ADIM 3: DEPLOY (CLI Komutları ile)
      # ===================================================
      - name: Deploy to Elastic Beanstalk via CLI
        run: |
          # Uygulama versiyon etiketini oluştur
          VERSION_LABEL="deploy-${{ github.sha }}"
          
          # 1. ZIP dosyasını EB'nin S3 klasörüne yükle
          # DİKKAT: Aşağıdaki yol, senin bölge ve Hesap ID'ne göre güncellenmeli.
          S3_BUCKET_PATH="s3://elasticbeanstalk-eu-central-1-579562937843/${VERSION_LABEL}.zip"
          
          echo "Yükleniyor: $S3_BUCKET_PATH"
          aws s3 cp deploy_package.zip $S3_BUCKET_PATH
          
          # 2. EB Uygulama Versiyonu Oluştur
          aws elasticbeanstalk create-application-version \
            --application-name "DernekERPBackend" \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket="elasticbeanstalk-eu-central-1-579562937843",S3Key="${VERSION_LABEL}.zip"
            
          # 3. Ortamı Yeni Versiyona Güncelle (Deploy et)
          aws elasticbeanstalk update-environment \
            --environment-name "DernekErpBackend-env" \
            --version-label "$VERSION_LABEL"